from pymongo import MongoClient
from bson.objectid import ObjectId
from faker import Faker
import pprint
import random
import sys

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Faker
faker = Faker("en_US")

# –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
try:
    client = MongoClient("mongodb://localhost:27017/",
                         serverSelectionTimeoutMS=2000)
    client.server_info()
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
    sys.exit(1)

# –í–∏–±—ñ—Ä –±–∞–∑–∏ —Ç–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
db = client["cat_database"]
collection = db["cats"]

FEATURE_POOL = [
    "–ª—é–±–∏—Ç—å —Ä–∏–±—É", "–±–æ—ó—Ç—å—Å—è –ø–∏–ª–æ—Å–æ—Å–∞", "—Ö–æ–¥–∏—Ç—å –ø–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ",
    "–º—É—Ä–∫–æ—á–µ –≥–æ–ª–æ—Å–Ω–æ", "—Å—Ç—Ä–∏–±–∞—î –≤–∏—Å–æ–∫–æ", "–ª—é–±–∏—Ç—å —Å–ø–∞—Ç–∏",
    "–≥—Ä–∞—î—Ç—å—Å—è –∑ –∫–ª—É–±–∫–æ–º –Ω–∏—Ç–æ–∫", "—à–∏–ø–∏—Ç—å –Ω–∞ –≥–æ—Å—Ç–µ–π", "–ø—Ä–æ—Å–∏—Ç—å —ó–∂—É",
    "–ª—ñ–∑–µ –≤ –∫–æ—Ä–æ–±–∫–∏", "—Ç—Ä–µ—Ç—å—Å—è –æ–± –Ω–æ–≥–∏"
]


def print_all_cats():
    print("–í—Å—ñ –∫–æ—Ç–∏ —É –±–∞–∑—ñ:")
    cats = list(collection.find())
    if not cats:
        print("üì≠ –ë–∞–∑–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        return
    for cat in cats:
        name = cat.get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
        age = cat.get("age", "–ù–µ–≤—ñ–¥–æ–º–æ")
        features = ", ".join(cat.get("features", []))
        print(f"üêà –Ü–º'—è: {name} | –í—ñ–∫: {age} | –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {features}")


def find_cat_by_name():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ç–∞: ").strip()
    if not name:
        print("–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return
    cat = collection.find_one(
        {"name": {"$regex": f"^{name}$", "$options": "i"}})
    if cat:
        pprint.pprint(cat)
    else:
        print("–ö–æ—Ç–∞ –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def update_cat_age():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ç–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É: ").strip()
    if not name:
        print("–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return
    new_age = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫: ").strip()
    if not new_age.isdigit() or not (0 < int(new_age) < 50):
        print("–í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 49.")
        return
    result = collection.update_one(
        {"name": {"$regex": f"^{name}$", "$options": "i"}},
        {"$set": {"age": int(new_age)}}
    )
    if result.matched_count:
        print("–í—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        print("–ö–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def add_feature_to_cat():
    name = input(
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ").strip()
    if not name:
        print("–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return
    new_feature = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É: ").strip()
    if not new_feature:
        print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
        return
    result = collection.update_one(
        {"name": {"$regex": f"^{name}$", "$options": "i"}},
        {"$addToSet": {"features": new_feature}}
    )
    if result.matched_count:
        print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–¥–∞–Ω–∞.")
    else:
        print("–ö–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def delete_cat_by_name():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ").strip()
    if not name:
        print("–Ü–º‚Äô—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return
    result = collection.delete_one(
        {"name": {"$regex": f"^{name}$", "$options": "i"}})
    if result.deleted_count:
        print("–ö–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print("–ö–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


def delete_all_cats():
    confirm = input(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤? (yes/no): ").strip()
    if confirm.lower() == 'yes':
        result = collection.delete_many({})
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∑–∞–ø–∏—Å—ñ–≤.")
    else:
        print("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")


def insert_sample_data():
    """–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    sample = {
        "name": "Barsik",
        "age": 3,
        "features": ["—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–ø—Ü—ñ", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Ä—É–¥–∏–π"]
    }
    collection.insert_one(sample)
    print("–ó—Ä–∞–∑–æ–∫ –¥–æ–¥–∞–Ω–æ.")


def generate_fake_cats():
    """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–æ—Ç—ñ–≤ —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —É –±–∞–∑—É"""
    try:
        count = int(input("–°–∫—ñ–ª—å–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–æ—Ç—ñ–≤ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏?: ").strip())
        if count <= 0:
            print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
            return
    except ValueError:
        print("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.")
        return

    fake_cats = []
    for _ in range(count):
        cat = {
            "name": faker.first_name(),
            "age": random.randint(1, 20),
            "features": random.sample(FEATURE_POOL, k=random.randint(2, 4))
        }
        fake_cats.append(cat)

    result = collection.insert_many(fake_cats)
    print(f"–î–æ–¥–∞–Ω–æ {len(result.inserted_ids)} –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–æ—Ç—ñ–≤.")


def main_menu():
    while True:
        print("\n===== üêæ –ú–µ–Ω—é üêæ =====")
        print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("2. –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º‚Äô—è–º")
        print("3. –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞")
        print("4. –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É")
        print("5. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º‚Äô—è–º")
        print("6. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("7. –î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–æ–∫")
        print("8. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–æ—Ç—ñ–≤")
        print("0. –í–∏–π—Ç–∏")
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == '1':
            print_all_cats()
        elif choice == '2':
            find_cat_by_name()
        elif choice == '3':
            update_cat_age()
        elif choice == '4':
            add_feature_to_cat()
        elif choice == '5':
            delete_cat_by_name()
        elif choice == '6':
            delete_all_cats()
        elif choice == '7':
            insert_sample_data()
        elif choice == '8':
            generate_fake_cats()
        elif choice == '0':
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main_menu()
